# 前端Dockerfile - Vue.js应用
FROM node:18-alpine as build-stage

# 设置工作目录
WORKDIR /app

# 复制前端代码
COPY frontend/package*.json ./
RUN npm ci --only=production

COPY frontend/ .

# 构建生产版本
RUN npm run build

# 生产阶段 - 使用nginx提供静态文件
FROM nginx:alpine as production-stage

# 复制构建产物到nginx目录
COPY --from=build-stage /app/dist /usr/share/nginx/html

# 创建nginx配置
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    
    # 前端静态文件
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # API代理到后端
    location /api/ {
        proxy_pass http://video-learning-manager-gpu:8000/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 支持文件上传
        client_max_body_size 500M;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
    }
    
    # 健康检查代理
    location /health {
        proxy_pass http://video-learning-manager-gpu:8000/health;
        proxy_set_header Host $host;
    }
    
    # API文档代理
    location /docs {
        proxy_pass http://video-learning-manager-gpu:8000/docs;
        proxy_set_header Host $host;
    }
    
    location /openapi.json {
        proxy_pass http://video-learning-manager-gpu:8000/openapi.json;
        proxy_set_header Host $host;
    }
}
EOF

# 暴露端口
EXPOSE 80

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]